import requests
from lxml import etree
import re
from fontTools.ttLib import TTFont
from PIL import Image, ImageDraw, ImageFont
import pytesseract
import numpy
import os
from woff2tff import woff_to_ttf


class DzdpListFontDecrypt(object):
    """
    大众点评店铺搜索列表页 woff字体解密
    """

    def __init__(self, url):
        self.url = url
        # 页面 html
        self.html = None
        # 页面引用的 css 文件
        self.css = None
        self.woff_dc = dict()
        self.address_font_map = dict()
        self.shop_num_font_map = dict()
        self.tag_name_font_map = dict()
        self.referer = self.url.replace('/review_all', '')
        self.timeout = 10
        self.headers = {
            'Connection': 'keep-alive',
            'Pragma': 'no-cache',
            'Cache-Control': 'no-cache',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Accept-Language': 'zh-CN,zh;q=0.9',
            'Cookie': '_lxsdk_cuid=17a88e6abe4c8-07b9bdff3719a3-6373264-1fa400-17a88e6abe4c8; _lxsdk=17a88e6abe4c8-07b9bdff3719a3-6373264-1fa400-17a88e6abe4c8; _hc.v=88a750f1-8fa3-943a-5da2-be751054eef6.1626059765; Hm_lvt_602b80cf8079ae6591966cc70a3940e7=1625794457,1626055313; fspop=test; Hm_lvt_dbeeb675516927da776beeb1d9802bd4=1626072970; Hm_lpvt_dbeeb675516927da776beeb1d9802bd4=1626072970; default_ab=shopList:A:5; cityid=4; cy=16; cye=wuhan; _lxsdk_s=17a9e84bb7e-d27-ae9-1fb||224; Hm_lpvt_602b80cf8079ae6591966cc70a3940e7=1626158555',
            # 'Referer':self.url
        }

    def get_woffs(self):
        html_res = requests.get(self.url, headers=self.headers)
        self.html = html_res.text
        # 查找 <!-- 图文混排css -->
        result = re.search('<link rel="stylesheet" type="text/css" href="//s3plus(.*?)">', self.html, re.S)
        if result:
            css_url = 'http://s3plus' + result.group(1)
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36'
            }
            # 获取css文件
            css_res = requests.get(css_url, headers=headers)
            # print(f"css 文件地址:{css_url}")
            self.css = css_res.text

            result = re.findall('@font-face\{font-family: "(.*?)";.*?,url\("(.*?)"\);\}', self.css)
            # print(f"css 文件内容:{result}")

            self.woff_dc = dict(result)
            if not os.path.exists('woff_file'):
                os.mkdir('woff_file')

            for woff_url in result:
                url = 'http:' + woff_url[1]
                res = requests.get(url, headers=headers)
                filename = woff_url[1].split('/')[-1]
                filepath = f'./woff_file/{filename}'
                with open(filepath, 'wb') as f:
                    f.write(res.content)
                self.woff_dc[woff_url[0]] = filepath
            # print(self.woff_dc)

    def get_woff_2_ttf(self):
        tmp_dc = self.woff_dc
        for key in tmp_dc:
            woff_path = tmp_dc[key]
            ttf_filepath = woff_path.replace('.woff', '.ttf')
            woff_to_ttf([woff_path, ttf_filepath])
            self.woff_dc[key] = ttf_filepath
        # print(self.woff_dc)

    def fontConvert(self, fontPath):
        fonts = TTFont(fontPath)
        codeList = fonts.getGlyphOrder()[2:]
        im = Image.new("RGB", (1800, 1000), (255, 255, 255))
        dr = ImageDraw.Draw(im)
        font = ImageFont.truetype(font=os.path.abspath(fontPath), size=40)
        count = 18
        arrayList = numpy.array_split(codeList, count)
        for t in range(count):
            newList = [i.replace("uni", "\\u") for i in arrayList[t]]
            text = "".join(newList)
            text = text.encode('utf-8').decode('unicode_escape')
            dr.text((0, 50 * t), text, font=font, fill="#000000")
        images_name = './images/font.jpg'
        im.save(images_name)
        im = Image.open(images_name)
        result = pytesseract.image_to_string(im, lang="chi_sim")
        result = result.replace(" ", "").replace("\n", "")
        codeList = [i.replace("uni", "&#x") + ";" for i in codeList]
        return dict(zip(codeList, list(result)))

    def get_font_map(self):
        for key in self.woff_dc:
            if 'shopNum' in key:
                self.shop_num_font_map = self.fontConvert(self.woff_dc[key])
            elif 'address' in key:
                self.address_font_map = self.fontConvert(self.woff_dc[key])
            elif 'tagName' in key:
                self.tag_name_font_map = self.fontConvert(self.woff_dc[key])

    def get_shop_info(self):
        """
        :return: 店铺信息
        """
        shop_info = {}
        # 替换加密节点中的内容为匹配map后的解密内容
        shopNum_res = re.findall('<svgmtsi class="shopNum">(.*?)</svgmtsi>', self.html, re.S)
        for i in shopNum_res:
            self.html = re.sub('<svgmtsi class="shopNum">{}</svgmtsi>'.format(i), self.shop_num_font_map[i], self.html)

        address_res = re.findall('<svgmtsi class="address">(.*?)</svgmtsi>', self.html, re.S)
        for i in address_res:
            self.html = re.sub('<svgmtsi class="address">{}</svgmtsi>'.format(i), self.address_font_map[i], self.html)

        tagName = re.findall('<svgmtsi class="tagName">(.*?)</svgmtsi>', self.html, re.S)
        for i in tagName:
            self.html = re.sub('<svgmtsi class="tagName">{}</svgmtsi>'.format(i), self.tag_name_font_map[i], self.html)

        tree = etree.HTML(self.html)
        shop_list = tree.xpath('//div[@id="shop-all-list"]/ul/li')
        if shop_list:
            for shop in shop_list:
                shop_name = shop.xpath('.//div[@class="tit"]/a/h4/text()')
                shop_id = shop.xpath('.//div[@class="tit"]/a/@data-shopid')
                shop_url = shop.xpath('.//div[@class="tit"]/a/@href')
                shop_star_score = shop.xpath('.//div[@class="comment"]/div/div[2]/text()')
                shop_review_nums = shop.xpath('.//div[@class="comment"]/a[1]/b/text()')
                shop_mean_price = shop.xpath('.//div[@class="comment"]/a[2]/b/text()')
                shop_tag = shop.xpath('.//div[@class="tag-addr"]/a[1]/span/text()')
                shop_address_tag = shop.xpath('.//div[@class="tag-addr"]/a[2]/span/text()')
                shop_address_des = shop.xpath('.//div[@class="tag-addr"]/span/text()')
                shop_taste_score = shop.xpath('.//span[@class="comment-list"]/span[1]/b/text()')
                shop_environment_score = shop.xpath('.//span[@class="comment-list"]/span[2]/b/text()')
                shop_service_score = shop.xpath('.//span[@class="comment-list"]/span[3]/b/text()')
                shop_recommend_dishes = shop.xpath('.//div[@class="recommend"]/a/text()')

                shop_info = {
                    "shop_name": shop_name[0].strip() if shop_name else '',
                    "shop_id": shop_id[0].strip() if shop_id else '',
                    "shop_url": shop_url[0].strip() if shop_url else '',
                    "score": shop_star_score[0].strip() if shop_star_score else '',
                    "review_nums": shop_review_nums[0].strip() if shop_review_nums else '',
                    "mean_price": shop_mean_price[0].strip() if shop_mean_price else '',
                    "tag": shop_tag[0].strip() if shop_tag else '',
                    "address_tag": shop_address_tag[0].strip() if shop_address_tag else '',
                    "address": shop_address_des[0].strip() if shop_address_des else '',
                    "taste_score": shop_taste_score[0].strip() if shop_taste_score else '',
                    "environment_score": shop_environment_score[0].strip() if shop_environment_score else '',
                    "service_score": shop_service_score[0].strip() if shop_service_score else '',
                    "recommend_dishes": shop_recommend_dishes
                }
                print(shop_info)

        return shop_info

    def run(self):
        self.get_woffs()
        self.get_woff_2_ttf()
        self.get_font_map()
        self.get_shop_info()


if __name__ == '__main__':
    # fl_url = 'http://www.dianping.com/wuhan/ch10/g117'
    # fl_url = 'http://www.dianping.com/wuhan/ch55/g33888'
    fl_url = 'http://www.dianping.com/wuhan/ch10/g102r111'
    dz = DzdpListFontDecrypt(fl_url)
    dz.run()
